// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using OwnedTypes;
using System;

namespace OwnedTypes.Migrations
{
    [DbContext(typeof(Database))]
    partial class DatabaseModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("OwnedTypes.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("author");
                });

            modelBuilder.Entity("OwnedTypes.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("AuthorId")
                        .HasColumnName("author_id");

                    b.Property<string>("Title")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("book");
                });

            modelBuilder.Entity("OwnedTypes.Author", b =>
                {
                    b.OwnsOne("OwnedTypes.Audit", "Audit", b1 =>
                        {
                            b1.Property<int>("AuthorId");

                            b1.Property<DateTime>("Modified");

                            b1.ToTable("author");

                            b1.HasOne("OwnedTypes.Author")
                                .WithOne("Audit")
                                .HasForeignKey("OwnedTypes.Audit", "AuthorId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("OwnedTypes.EnumWrapper<OwnedTypes.Status>", "Status", b1 =>
                        {
                            b1.Property<int>("AuthorId");

                            b1.Property<string>("_Raw")
                                .IsRequired()
                                .HasColumnName("status")
                                .HasMaxLength(20);

                            b1.ToTable("author");

                            b1.HasOne("OwnedTypes.Author")
                                .WithOne("Status")
                                .HasForeignKey("OwnedTypes.EnumWrapper<OwnedTypes.Status>", "AuthorId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("OwnedTypes.Book", b =>
                {
                    b.HasOne("OwnedTypes.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("OwnedTypes.Audit", "Audit", b1 =>
                        {
                            b1.Property<int?>("BookId");

                            b1.Property<DateTime>("Modified");

                            b1.ToTable("book");

                            b1.HasOne("OwnedTypes.Book")
                                .WithOne("Audit")
                                .HasForeignKey("OwnedTypes.Audit", "BookId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("OwnedTypes.EnumWrapper<OwnedTypes.Genre>", "Genre", b1 =>
                        {
                            b1.Property<int>("BookId");

                            b1.Property<string>("_Raw")
                                .IsRequired()
                                .HasColumnName("genre")
                                .HasMaxLength(20);

                            b1.ToTable("book");

                            b1.HasOne("OwnedTypes.Book")
                                .WithOne("Genre")
                                .HasForeignKey("OwnedTypes.EnumWrapper<OwnedTypes.Genre>", "BookId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("OwnedTypes.EnumWrapper<OwnedTypes.Section>", "Section", b1 =>
                        {
                            b1.Property<int>("BookId");

                            b1.Property<string>("_Raw")
                                .IsRequired()
                                .HasColumnName("section")
                                .HasMaxLength(20);

                            b1.ToTable("book");

                            b1.HasOne("OwnedTypes.Book")
                                .WithOne("Section")
                                .HasForeignKey("OwnedTypes.EnumWrapper<OwnedTypes.Section>", "BookId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("OwnedTypes.EnumWrapper<OwnedTypes.Status>", "Status", b1 =>
                        {
                            b1.Property<int?>("BookId");

                            b1.Property<string>("_Raw")
                                .IsRequired()
                                .HasColumnName("status")
                                .HasMaxLength(20);

                            b1.ToTable("book");

                            b1.HasOne("OwnedTypes.Book")
                                .WithOne("Status")
                                .HasForeignKey("OwnedTypes.EnumWrapper<OwnedTypes.Status>", "BookId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
